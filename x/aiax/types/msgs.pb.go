// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aiax/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSendToEthereum submits a SendToEthereum attempt to bridge an asset over to
// Ethereum. The SendToEthereum will be stored and then included in a batch and
// then submitted to Ethereum.
type MsgSendToEthereum struct {
	Sender            string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	EthereumRecipient string     `protobuf:"bytes,2,opt,name=ethereum_recipient,json=ethereumRecipient,proto3" json:"ethereum_recipient,omitempty"`
	Amount            types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	BridgeFee         types.Coin `protobuf:"bytes,4,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
}

func (m *MsgSendToEthereum) Reset()         { *m = MsgSendToEthereum{} }
func (m *MsgSendToEthereum) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthereum) ProtoMessage()    {}
func (*MsgSendToEthereum) Descriptor() ([]byte, []int) {
	return fileDescriptor_b053a2b2c39111b7, []int{0}
}
func (m *MsgSendToEthereum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthereum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthereum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthereum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthereum.Merge(m, src)
}
func (m *MsgSendToEthereum) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthereum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthereum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthereum proto.InternalMessageInfo

func (m *MsgSendToEthereum) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToEthereum) GetEthereumRecipient() string {
	if m != nil {
		return m.EthereumRecipient
	}
	return ""
}

func (m *MsgSendToEthereum) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgSendToEthereum) GetBridgeFee() types.Coin {
	if m != nil {
		return m.BridgeFee
	}
	return types.Coin{}
}

// MsgSendToEthereumResponse returns the SendToEthereum transaction ID which
// will be included in the batch tx.
type MsgSendToEthereumResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgSendToEthereumResponse) Reset()         { *m = MsgSendToEthereumResponse{} }
func (m *MsgSendToEthereumResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthereumResponse) ProtoMessage()    {}
func (*MsgSendToEthereumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b053a2b2c39111b7, []int{1}
}
func (m *MsgSendToEthereumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthereumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthereumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthereumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthereumResponse.Merge(m, src)
}
func (m *MsgSendToEthereumResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthereumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthereumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthereumResponse proto.InternalMessageInfo

func (m *MsgSendToEthereumResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgSendToEthereum)(nil), "aiax.v1.MsgSendToEthereum")
	proto.RegisterType((*MsgSendToEthereumResponse)(nil), "aiax.v1.MsgSendToEthereumResponse")
}

func init() { proto.RegisterFile("aiax/v1/msgs.proto", fileDescriptor_b053a2b2c39111b7) }

var fileDescriptor_b053a2b2c39111b7 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x93, 0x6e, 0xa9, 0xec, 0x08, 0x0b, 0x3b, 0x88, 0x24, 0x41, 0xe2, 0x92, 0xd3, 0x82,
	0xec, 0x0c, 0xa9, 0x07, 0x6f, 0x1e, 0x2a, 0x8a, 0x97, 0x5e, 0xa2, 0x17, 0xbd, 0x94, 0x49, 0xf2,
	0x3a, 0x1d, 0x34, 0xf3, 0x42, 0x66, 0x52, 0xdb, 0x6f, 0xe1, 0xc7, 0xea, 0xb1, 0xe0, 0xc5, 0x93,
	0x48, 0xfb, 0x45, 0x24, 0xc9, 0xe4, 0x62, 0x11, 0xbc, 0xbd, 0xff, 0xfb, 0xfd, 0xdf, 0x1b, 0xfe,
	0xf3, 0x08, 0x15, 0x4a, 0xec, 0xf8, 0x36, 0xe5, 0x95, 0x91, 0x86, 0xd5, 0x0d, 0x5a, 0xa4, 0x8f,
	0xba, 0x1e, 0xdb, 0xa6, 0x51, 0x5c, 0xa0, 0xa9, 0xd0, 0xf0, 0x5c, 0x18, 0xe0, 0xdb, 0x34, 0x07,
	0x2b, 0x52, 0x5e, 0xa0, 0xd2, 0x83, 0x31, 0x0a, 0x07, 0xbe, 0xea, 0x15, 0x1f, 0x84, 0x43, 0x4f,
	0x24, 0x4a, 0x1c, 0xfa, 0x5d, 0xe5, 0xba, 0xcf, 0x24, 0xa2, 0xfc, 0x0a, 0x5c, 0xd4, 0x8a, 0x0b,
	0xad, 0xd1, 0x0a, 0xab, 0x50, 0x8f, 0x33, 0xa1, 0xa3, 0xbd, 0xca, 0xdb, 0x35, 0x17, 0x7a, 0x3f,
	0xa0, 0xe4, 0x87, 0x4f, 0x6e, 0x97, 0x46, 0x7e, 0x00, 0x5d, 0x7e, 0xc4, 0xb7, 0x76, 0x03, 0x0d,
	0xb4, 0x15, 0x7d, 0x4a, 0x66, 0x06, 0x74, 0x09, 0x4d, 0xe0, 0xdf, 0xf9, 0xf7, 0xd7, 0x99, 0x53,
	0xf4, 0x81, 0x50, 0x70, 0x9e, 0x55, 0x03, 0x85, 0xaa, 0x15, 0x68, 0x1b, 0x4c, 0x7a, 0xcf, 0xed,
	0x48, 0xb2, 0x11, 0xd0, 0x57, 0x64, 0x26, 0x2a, 0x6c, 0xb5, 0x0d, 0xae, 0xee, 0xfc, 0xfb, 0xc7,
	0xf3, 0x90, 0xb9, 0x28, 0x5d, 0x6e, 0xe6, 0x72, 0xb3, 0x37, 0xa8, 0xf4, 0x62, 0x7a, 0xf8, 0xf5,
	0xdc, 0xcb, 0x9c, 0x9d, 0xbe, 0x26, 0x24, 0x6f, 0x54, 0x29, 0x61, 0xb5, 0x06, 0x08, 0xa6, 0xff,
	0x37, 0x7c, 0x3d, 0x8c, 0xbc, 0x03, 0x48, 0x5e, 0x90, 0xf0, 0x22, 0x54, 0x06, 0xa6, 0x46, 0x6d,
	0x80, 0xde, 0x90, 0x89, 0x2a, 0xfb, 0x60, 0xd3, 0x6c, 0xa2, 0xca, 0xf9, 0x27, 0x72, 0xb5, 0x34,
	0x92, 0x66, 0xe4, 0xe6, 0xaf, 0x5f, 0x88, 0x98, 0xbb, 0x17, 0xbb, 0x58, 0x16, 0x25, 0xff, 0x66,
	0xe3, 0x43, 0x89, 0xb7, 0x78, 0x7f, 0x38, 0xc5, 0xfe, 0xf1, 0x14, 0xfb, 0xbf, 0x4f, 0xb1, 0xff,
	0xfd, 0x1c, 0x7b, 0xc7, 0x73, 0xec, 0xfd, 0x3c, 0xc7, 0xde, 0x67, 0x26, 0x95, 0xdd, 0xb4, 0x39,
	0x2b, 0xb0, 0xe2, 0xdd, 0xa6, 0x07, 0x0d, 0xf6, 0x1b, 0x36, 0x5f, 0x9c, 0xc0, 0x12, 0xf8, 0xae,
	0xaf, 0xb9, 0xdd, 0xd7, 0x60, 0xf2, 0x59, 0x7f, 0xae, 0x97, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x98, 0x1a, 0xcd, 0x06, 0x57, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendToEthereum(ctx context.Context, in *MsgSendToEthereum, opts ...grpc.CallOption) (*MsgSendToEthereumResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendToEthereum(ctx context.Context, in *MsgSendToEthereum, opts ...grpc.CallOption) (*MsgSendToEthereumResponse, error) {
	out := new(MsgSendToEthereumResponse)
	err := c.cc.Invoke(ctx, "/aiax.v1.Msg/SendToEthereum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendToEthereum(context.Context, *MsgSendToEthereum) (*MsgSendToEthereumResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendToEthereum(ctx context.Context, req *MsgSendToEthereum) (*MsgSendToEthereumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEthereum not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendToEthereum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToEthereum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEthereum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aiax.v1.Msg/SendToEthereum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEthereum(ctx, req.(*MsgSendToEthereum))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aiax.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToEthereum",
			Handler:    _Msg_SendToEthereum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aiax/v1/msgs.proto",
}

func (m *MsgSendToEthereum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthereum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthereum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EthereumRecipient) > 0 {
		i -= len(m.EthereumRecipient)
		copy(dAtA[i:], m.EthereumRecipient)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToEthereumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthereumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthereumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendToEthereum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthereumRecipient)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSendToEthereumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsgs(uint64(m.Id))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendToEthereum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthereum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthereum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEthereumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthereumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthereumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
