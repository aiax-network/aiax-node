syntax = "proto3";
package aiax.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/aiax-network/aiax-node/x/aiax/types";

// Msg defines the state transitions possible within gravity
service Msg {
  rpc SendToEthereum(MsgSendToEthereum) returns (MsgSendToEthereumResponse) {
    // option (google.api.http).post = "/aiax/v1/send_to_ethereum";
  }
}

// MsgSendToEthereum submits a SendToEthereum attempt to bridge an asset over to
// Ethereum. The SendToEthereum will be stored and then included in a batch and
// then submitted to Ethereum.
message MsgSendToEthereum {
  string sender = 1;
  string ethereum_recipient = 2;
  cosmos.base.v1beta1.Coin amount = 3 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin bridge_fee = 4 [ (gogoproto.nullable) = false ];
}

// MsgSendToEthereumResponse returns the SendToEthereum transaction ID which
// will be included in the batch tx.
message MsgSendToEthereumResponse { uint64 id = 1; }
